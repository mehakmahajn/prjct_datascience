# -*- coding: utf-8 -*-
"""Copy of Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OUs_v3JHLhcNVnv-_eP56-oAVaZPe7HC

# **Student Placement Pridiction using Logistic Regression**

# **Get understand about Dataset**

The variables in Dataset are
1. studenID
2. CGPA
3. IQ
4. Placement

# **impot liabrary**
"""

import pandas as pd

import numpy as np

"""# **import CSV as DataFrame**"""

df= pd.read_csv(r'https://raw.githubusercontent.com/YBI-Foundation/Dataset/refs/heads/main/Placement.csv')

"""# **Get the ist Five row of dataframe**"""

df.head()

"""# **Get Information of Dataframe**"""

df.info()

"""# **Get the Summary Statistics**"""

df.describe()

"""# **Get column names**"""

df.columns

"""# **Get the Shape of the dataframe**"""

df.shape

"""# **Get unique values (class or label) in y variable**"""

df['Placement']. value_counts()

df.groupby('Placement').mean()

"""# **Define X and Y**"""

y=df['Placement']

y.shape

y

x=df[['CGPA','IQ']]

x.shape

x

"""# **Get X Variable Standardized**"""

from sklearn.preprocessing import StandardScaler

ss=StandardScaler()

x = ss.fit_transform(x)

x

x.shape

"""# **Get Train split test**"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, stratify=y, random_state=2529)

x_train.shape, x_test.shape, y_train.shape, y_test.shape

"""# **Get model train**"""

from sklearn.linear_model import LogisticRegression

lr=LogisticRegression()

lr.fit(x_train, y_train)

"""# **Get model pridiction**"""

y_pred=lr.predict(x_test)

y_pred.shape

y_pred

"""# **Get probability of each predicted classes**"""

lr.predict_proba(x_test)

"""# **Get model evalution**"""

from sklearn.metrics import confusion_matrix, classification_report

print(confusion_matrix(y_test, y_pred))

print(classification_report(y_test, y_pred))

"""# **Get future prediction**

**Let select a random sample from existing dataset as new rule**

step to follow


1.   Extract a random row using sample function
2.   seperate x and y
3.   standardize x
4.   predict
"""

x_new=df.sample(1)

x_new

x_new.shape

x_new = x_new.drop(['Student_ID', 'Placement'], axis=1, errors='ignore')

x_new

x_new.shape

x_new=ss.fit_transform(x_new)

y_pred_new=lr.predict(x_new)

y_pred_new

lr.predict_proba(x_new)
